name: test
on:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        options:
          -
          - --no-default-features
          - --all-features
          - --features libc,std
          - --features float62
          - --features async
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: cargo build --locked ${{ matrix.options }}
      - run: cargo test --no-run --locked ${{ matrix.options }}
  unit_test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-15
        options:
          -
          - --no-default-features
          - --features libc,std
          - --features float62
          - --features async
          - --features gc_always --exclude stak-compiler
        exclude:
          - os: ${{ github.ref == 'refs/heads/main' && 'none' || 'macos-15' }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: cargo test --workspace ${{ matrix.options }}
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: tools/coverage.sh
      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: lcov.info
  integration_test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-15
        interpreter:
          - name: stak-tools
            host: chibi-scheme
          - name: stak-tools
            host: gosh
          - name: stak-tools
            host: guile
          - name: stak-tools
            host: gosh
            features:
              - gc_always
            options: --tags ~@long
          - name: chibi
            options: --tags ~@stak,@chibi
          - name: gauche
            options: --tags ~@stak,@gauche
          - name: guile
            options: --tags ~@stak,@guile
        exclude:
          - os: ${{ github.ref == 'refs/heads/main' && 'none' || 'macos-15' }}
    runs-on: ${{ matrix.os }}
    env:
      STAK_HOST_INTERPRETER: ${{ matrix.interpreter.host || 'gosh' }}
      GUILE_AUTO_COMPILE: 0
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/setup-scheme
      - run: >
          tools/integration_test.sh
          -i ${{ matrix.interpreter.name }}
          -f ${{ join(matrix.interpreter.features, ',') }},
          --
          ${{ matrix.interpreter.options }}
  self_host_integration_test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-15
        interpreter:
          - name: stak
          - name: stak-tools
          - name: mstak
            options: --tags ~@environment-variable --tags ~@float
          - name: mstak-tools
            options: --tags ~@environment-variable --tags ~@float
        exclude:
          - os: ${{ github.ref == 'refs/heads/main' && 'none' || 'macos-15' }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: >
          tools/integration_test.sh
          -i ${{ matrix.interpreter.name }}
          -f ${{ join(matrix.interpreter.features, ',') }},
          --
          ${{ matrix.interpreter.options }}'
  self_host_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: tools/self_host_test.sh
  minimal:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: cargo build
        working-directory: cmd/minimal
      - run: cargo build --release
        working-directory: cmd/minimal
      - run: ls -lB target/release
        working-directory: cmd/minimal
      - run: cargo fmt --check
        working-directory: cmd/minimal
      - run: cargo clippy
        working-directory: cmd/minimal
      - run: cargo test
        working-directory: cmd/minimal
  wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: actions/setup-node@v4
        with:
          node-version: ">=23.5.0"
      - run: cargo install wasm-pack
      - run: wasm-pack build
        working-directory: wasm
      - run: wasm-pack test --node --release
        working-directory: wasm
      - run: wasm-pack pack
        working-directory: wasm
  decode:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: tools/decode_test.sh
  r7rs_compatible_compiler:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/setup-scheme
      - run: tools/r7rs_compatible_compiler_test.sh
  r7rs_compatible_library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: tools/r7rs_compatible_library_test.sh
  profile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: tools/profile_test.sh
  test:
    needs:
      - build
      - unit_test
      - integration_test
      - self_host_test
      - wasm
      - minimal
      - decode
      - r7rs_compatible_compiler
      - r7rs_compatible_library
      - profile
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: for result in ${{ join(needs.*.result, ' ') }}; do [ $result = success ]; done
